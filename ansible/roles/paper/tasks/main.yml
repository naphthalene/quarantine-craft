---
# Status checks
- name: Check if tmux session is already running
  ansible.builtin.shell:
    cmd: >
      tmux list-sessions -F '#{session_name}' | grep {{ srv_tmux_session_name }}
  register: srv_tmux_session_exists
  ignore_errors: yes

- name: Check if server is running
  ansible.builtin.shell:
    cmd: "pgrep -f 'java.*paper'"
  register: srv_running_pid
  ignore_errors: yes

# Basic setup
- name: Create /etc/default/minecraft
  become: yes
  ansible.builtin.template:
    src: "{{ role_path }}/templates/etc_default_minecraft"
    dest: /etc/default/minecraft
    owner: root
    group: root
    mode: '0644'
  vars:
    etc_default_minecraft:
      OVERLAY_DIR: "{{ srv_overlay_dir }}"
      CONFIG_DIR: "{{ srv_config_dir }}"
      DATA_DIR: "{{ srv_data_dir }}"
      BACKUP_DIR: "{{ srv_backup_dir }}"
      JAVA_MEMORY: "{{ srv_memory }}"
      WEB_DIR: "{{ web_root_dir }}"

- name: Load plugin var files
  include_vars:
    dir: "{{ role_path }}/vars/plugins"
    name: plugin_configs

- name: Clone the repo
  ansible.builtin.git:
    repo: "{{ git_repo }}"
    version: "{{ git_ref }}"
    dest: "{{ git_clone_dir }}"
    force: yes

- name: Ensure server directories exist
  loop: "{{ server_dirs }}"
  become: yes
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ srv_user }}"
    group: "{{ srv_user }}"
  vars:
    server_dirs:
      - "{{ srv_overlay_dir }}"
      - "{{ srv_backup_dir }}"
      - "{{ srv_config_dir }}"
      - "{{ srv_data_dir }}"
      - "{{ srv_work_dir }}"
      - "{{ srv_plugin_jar_dir }}"
      - "{{ srv_server_jar_dir }}"
      - "{{ srv_config_dir }}/plugins"

- name: Ensure plugin config directories exist
  loop: "{{ srv_plugins.enabled }}"
  ansible.builtin.file:
    path: "{{ srv_config_dir }}/plugins/{{ item.data_folder if item.data_folder is defined else item.name }}"
    state: directory
    owner: "{{ srv_user }}"
    group: "{{ srv_user }}"

- name: Enumerate all generated plugin files
  set_fact:
    srv_generated_server_configs: "{{ (srv_config.templates | json_query('[].file')) + (srv_config.raw_yaml | json_query('[].file')) }}"
    srv_generated_plugin_configs: "{{ srv_plugins.enabled | json_query('[].{name: name, files: [raw_yaml,templates][].file}') }}"

# Configure the server
- name: Symlink any scripts to the repo
  loop: "{{ symlink_scripts }}"
  ansible.builtin.file:
    state: link
    owner: "{{ srv_user }}"
    group: "{{ srv_user }}"
    src: "{{ git_clone_dir }}/bin/{{ item }}"
    dest: "{{ srv_config_dir }}/{{ item }}"
  vars:
    symlink_scripts:
      - start.sh
      - backup.sh

- name: Symlink the server jar
  ansible.builtin.file:
    state: link
    owner: "{{ srv_user }}"
    group: "{{ srv_user }}"
    src: "{{ srv_server_jar_dir }}/paper-{{ srv_paper_version }}.jar"
    dest: "{{ srv_config_dir }}/paper.jar"

- name: Render server configs from raw YAML
  loop: "{{ srv_config.raw_yaml }}"
  ansible.builtin.copy:
    dest: "{{ srv_config_dir }}/{{ item.file }}"
    owner: "{{ srv_user }}"
    group: "{{ srv_user }}"
    mode: '0644'
    content: "{{ srv_config_data[item.key] | to_nice_yaml(indent=2, width=1337) }}"
  notify:
    - restart

- name: Render server configs from templates
  loop: "{{ srv_config.templates }}"
  ansible.builtin.template:
    src: "{{ role_path }}/templates/{{ item.file }}"
    dest: "{{ srv_config_dir }}/{{ item.file }}"
    owner: "{{ srv_user }}"
    group: "{{ srv_user }}"
    mode: '0644'
  notify:
    - restart

- name: Symlink all plugins from the plugin JAR folder
  loop: "{{ srv_plugins.enabled }}"
  ansible.builtin.file:
    state: link
    owner: "{{ srv_user }}"
    group: "{{ srv_user }}"
    src: "{{ srv_plugin_jar_dir }}/{{ item.name }}/{{ item.version }}.jar"
    dest: "{{ srv_config_dir }}/plugins/{{ item.name }}.jar"
  when: "item.version is defined"
  notify:
    - restart

- name: Render plugin configs from raw YAML
  loop: "{{ srv_plugins.enabled | subelements('raw_yaml', skip_missing=True) }}"
  ansible.builtin.copy:
    dest: "{{ srv_config_dir }}/plugins/{{ item.0.data_folder if item.0.data_folder is defined else item.0.name }}/{{ item.1.file }}"
    owner: "{{ srv_user }}"
    group: "{{ srv_user }}"
    mode: '0644'
    content: "{{ plugin_configs[item.0.name][item.1.key] | to_nice_yaml(indent=2, width=1337) }}"
  notify:
    - restart

- name: Render plugin configs from templates
  loop: "{{ srv_plugins.enabled | subelements('templates', skip_missing=True) }}"
  ansible.builtin.template:
    src: "{{ role_path }}/templates/plugins/{{ item.0.data_folder if item.0.data_folder is defined else item.0.name }}/{{ item.1.file }}"
    dest: "{{ srv_config_dir }}/plugins/{{ item.0.data_folder if item.0.data_folder is defined else item.0.name }}/{{ item.1.file }}"
    owner: "{{ srv_user }}"
    group: "{{ srv_user }}"
    mode: '0644'
  notify:
    - restart

- name: Create server overlay mount
  become: yes
  ansible.posix.mount:
    path: "{{ srv_overlay_dir }}"
    state: mounted
    src: overlay
    fstype: overlay
    opts: "index=off,lowerdir={{ srv_config_dir }},upperdir={{ srv_data_dir }},workdir={{ srv_work_dir }}"

- name: Start the server if it is not running
  debug:
    msg: '>> Starting server if not running'
  changed_when: srv_running_pid is failed
  notify:
    - start

- name: Install scraper from directory
  ansible.builtin.pip:
    name: "file://{{ git_dir }}/"
    virtualenv: "{{ git_dir }}/.venv"

- name: Run scraper every specified period
  ansible.builtin.cron:
    name: "Run qcraft-scraper"
    minute: srv_scraper_cron.minute
    job: ". {{ git_dir }}/.venv; qcraft-scraper"
  when: srv_scraper_cron_enable
